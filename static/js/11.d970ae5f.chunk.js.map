{"version":3,"file":"static/js/11.d970ae5f.chunk.js","mappings":"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","sources":["components/api.js","components/Loader/Loader.jsx","pages/page.styled/MovieDetailsWrapper.styled.js","pages/MovieDetails.jsx"],"sourcesContent":["import axios from \"axios\";\n\nconst API_KEY = 'bfb089247bb1d6067836437ecb783621';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\naxios.defaults.params = {\n    api_key : API_KEY\n}\n\nexport const getTrendingMovie = async () => {\n    try {\n        const { data } = await axios.get('/trending/movie/week');\n        return data;\n    } catch (error) {\n        return console.log(`Something was wrong: ${error}`);\n    }\n};\n\nexport const getMovieDetailsById = async (movieId) => {\n    try {\n        const { data } = await axios.get(`/movie/${movieId}`);\n        return data;\n    } catch (error) {\n        return console.log(`Something was wrong: ${error}`);\n    }\n}\n\nexport const getMovieCredits = async (movieId) => {\n    try {\n        const { data } = await axios.get(`/movie/${movieId}/credits`);\n        return data;\n    } catch (error) {\n        return console.log(`Something was wrong: ${error}`);\n    }\n}\n\nexport const getMovieReviews = async (movieId) => {\n    try {\n        const { data } = await axios.get(`/movie/${movieId}/reviews`);\n        return data;\n    } catch (error) {\n        return console.log(`Something was wrong: ${error}`);\n    }\n}\n\nexport const getMovieByName = async (query) => {\n    try {\n        const { data } = await axios.get(`/search/movie`, {\n            params: {\n                query\n            }\n        });\n        return data;\n    } catch (error) {\n        return console.log(`Something was wrong: ${error}`);\n    }\n}","import { FallingLines } from \"react-loader-spinner\"\n\nexport const Loader = () =>\n<FallingLines\n  color=\"#4fa94d\"\n  width=\"100\"\n  visible={true}\n  ariaLabel='falling-lines-loading'\n/>","import styled from \"@emotion/styled\";\n\nexport const MovieDetailsWrapper = styled.div`\ndisplay: flex;\nflex-direction: column;\ngap: 16px;\n\n.button{\n    padding: 4px;\n    background-color: green;\n    width: 75px;\n    border: 1px solid black;\n    border-radius: 10px;\n    display: flex;\n    justify-content: center;\n    color: white;\n\n    :hover,\n    :focus{\n        background-color: red;\n    }\n}\n\n.poster{\n    margin: 0 auto;\n}\n\n.user-score{\n    margin: 0 auto;\n}\n\nh2{\n    margin: 0 auto;\n}\n\n.genres{\n    margin: 0 auto;\n}\n\n.additional-info-buttons-list{\n    display: flex;\n    gap: 30px;\n    justify-content: space-evenly;\n}\n\n`","import { getMovieDetailsById } from \"components/api\";\nimport { Suspense, useEffect, useState } from \"react\";\nimport { Link, Outlet, useLocation, useParams } from \"react-router-dom\"\nimport { Loader } from \"components/Loader/Loader\";\nimport { MovieDetailsWrapper } from \"./page.styled/MovieDetailsWrapper.styled\";\n\nconst MovieDetails = () => {\n    const { movieId } = useParams();\n\n\n\n    const [title, setTitle] = useState(null);\n    const [overview, setOverview] = useState(null);\n    const [genres, setGenres] = useState(null);\n    const [posterPath, setPosterPath] = useState(null);\n    const [releaseDate, setReleaseDate] = useState(null);\n    const [userScore, setUserScore] = useState(null);\n    const [isLoaded, setIsLoaded] = useState(false);\n\n    useEffect(() => {\n        setIsLoaded(true)\n        getMovieDetailsById(movieId)\n            .then(({ title, overview, genres, poster_path, release_date, vote_average }) => {\n                setTitle(title)\n                setOverview(overview)\n                setGenres(genres.map(genre => genre.name).join(', '))\n                setPosterPath(poster_path)\n                setReleaseDate(new Date(release_date).getFullYear())\n                setUserScore((vote_average * 10).toFixed() + '%')\n            })\n            .catch(error => console.log(error))\n            .finally(() => setIsLoaded(false))\n        \n    }, [movieId]);\n\n    \n    const location = useLocation();\n    const goBackLink = () => {\n\n        return location.state ? location.state.comeFromPage : null\n    };\n\n    if (isLoaded) {\n        return <Loader />\n    }\n    \n\n    return (\n        <MovieDetailsWrapper>\n            {goBackLink() && <Link className=\"button\" to={goBackLink()}>Go back</Link>}\n            <img className=\"poster\" src={`https://image.tmdb.org/t/p/original/${posterPath}`} width={400} alt={`${title} poster`} />\n            <h2>{`${title} (${releaseDate})`}</h2>\n            <p className=\"user-score\">User score: <span>{userScore}</span></p>\n            <h2>Overview</h2>\n            <p>{overview}</p>\n            <h2>Genres</h2>\n            <p className=\"genres\" >{genres}</p>\n                <h2>Additional information</h2>\n                <ul className=\"additional-info-buttons-list\">\n                    <li><Link className=\"button\" to={`/movies/${movieId}/cast`} state={{comeFromPage: goBackLink()}}>Cast</Link></li>\n                    <li><Link className=\"button\" to={`/movies/${movieId}/reviews`} state={{comeFromPage: goBackLink()}}>Reviews</Link></li>\n                </ul>\n                <Suspense fallback={<div>Loading...</div>}>\n                    <Outlet/>\n                </Suspense>\n        </MovieDetailsWrapper>\n    )\n    \n}\n\nexport default MovieDetails;"],"names":["axios","api_key","getTrendingMovie","data","console","log","getMovieDetailsById","movieId","getMovieCredits","getMovieReviews","getMovieByName","query","params","Loader","color","width","visible","ariaLabel","MovieDetailsWrapper","styled","useParams","useState","title","setTitle","overview","setOverview","genres","setGenres","posterPath","setPosterPath","releaseDate","setReleaseDate","userScore","setUserScore","isLoaded","setIsLoaded","useEffect","then","poster_path","release_date","vote_average","map","genre","name","join","Date","getFullYear","toFixed","catch","error","finally","location","useLocation","goBackLink","state","comeFromPage","className","to","src","alt","Suspense","fallback"],"sourceRoot":""}